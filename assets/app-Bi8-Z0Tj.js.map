{"version":3,"mappings":"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","names":["mlcontour","demSource","initContours","__vitePreload","maplibregl","OvertureMap","containerId","options","Protocol","style","error","response","baseUrl","sourceId","source","tilePath","oldUrl","layers","layer","contoursToggle","e","hillshadeToggle","blendModeSelect","feature","content","elevation","level","hillshadeLayer","contourLinesLayer","contourLabelsLayer","a","b","orderA","orderB","layerId","drawOrder","layerDefinition","sortedLayers","id","order","beforeLayerId","newDrawOrder","visible","visibility","minorInterval","majorInterval","mode","colorExpression","opacityValue","item","index"],"ignoreList":[],"sources":["../../src/js/basemap.js"],"sourcesContent":["import maplibregl from 'maplibre-gl';\nimport { Protocol } from 'pmtiles';\n\n// Lazy load contour functionality\nlet mlcontour = null;\nlet demSource = null;\n\nasync function initContours() {\n    if (!mlcontour) {\n        // Import the module and get the default export\n        const mlcontourModule = await import('maplibre-contour');\n        mlcontour = mlcontourModule.default;\n        \n        // Now create DemSource using the imported module\n        demSource = new mlcontour.DemSource({\n            url: \"https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png\",\n            encoding: \"terrarium\", // \"mapbox\" or \"terrarium\" default=\"terrarium\"\n            maxzoom: 13,\n            worker: true, // offload isoline computation to a web worker to reduce jank\n            cacheSize: 100, // number of most-recent tiles to cache\n            timeoutMs: 10_000, // timeout on fetch requests\n        });\n        demSource.setupMaplibre(maplibregl);\n    }\n    return { mlcontour, demSource };\n}\n\nclass OvertureMap {\n    constructor(containerId, options = {}) {\n        this.containerId = containerId;\n        this.options = {\n            // Default bounds for St. Lawrence County\n            bounds: [\n                [-75.5, 44.0], // Southwest coordinates [lng, lat]\n                [-74.5, 45.0]  // Northeast coordinates [lng, lat]\n            ],\n            zoom: 14,\n            minZoom: 11,\n            maxZoom: 16,\n            showTileBoundaries: false,\n            ...options\n        };\n        \n        this.map = null;\n        this.protocol = null;\n        \n        // Layer draw order index - lower numbers draw first (bottom), higher numbers draw on top\n        this.layerDrawOrder = {\n            // Base layers (0-9)\n            'background': 0,\n            \n            // Terrain and elevation (10-19)\n            'hills': 10,          // Hillshade - draws over background but under everything else\n            \n            // Land use and land cover (20-39)\n            'land-use': 20,       // Land use polygons (residential, commercial, etc.)\n            'land': 25,           // Natural land features (forest, grass, etc.)\n            \n            // Water features (40-49)\n            'water-polygons': 40,        // Water body fills\n            'water-polygon-outlines': 41, // Water body outlines\n            'water-lines': 42,           // Rivers, streams, canals\n            \n            // Contour lines (50-59)\n            'contours': 50,       // Contour lines\n            'contour-text': 51,   // Contour elevation labels\n            \n            // Transportation (60-79)\n            'roads-solid': 60,    // Major road lines (solid)\n            'roads-dashed': 61,    // Minor road lines (dashed)\n            \n            // Buildings and structures (80-89)\n            'buildings': 80,           // Building fills\n            'building-outlines': 81,   // Building outlines\n            \n            // Points of interest (90-99)\n            'places': 90,         // Place points/circles\n            \n            // Labels and text (100+)\n            'place-labels': 100   // Place name labels - always on top\n        };\n        \n        this.init();\n    }\n    \n    /**\n     * Initialize the PMTiles protocol and create the map\n     */\n    init() {\n        // Initialize PMTiles protocol\n        this.protocol = new Protocol();\n        maplibregl.addProtocol(\"pmtiles\", this.protocol.tile);\n        \n        // Load the style configuration\n        this.loadStyle().then(async style => {\n            this.createMap(style);\n            this.setupEventHandlers();\n            this.addControls();\n            this.setupContourControls();\n        }).catch(error => {\n            console.error('Failed to load map style:', error);\n        });\n    }\n    \n    /**\n     * Load the MapLibre style from JSON file\n     */\n    async loadStyle() {\n        try {\n            const response = await fetch('./cartography.json');\n            if (!response.ok) {\n                throw new Error(`Failed to load style: ${response.statusText}`);\n            }\n            const style = await response.json();\n            \n            // Update PMTiles URLs to be absolute for production\n            this.updatePMTilesUrls(style);\n            \n            // Add contour sources and layers to the style\n            await this.addContourToStyle(style);\n            \n            // Sort layers according to draw order\n            this.sortLayersByDrawOrder(style);\n            \n            return style;\n        } catch (error) {\n            console.error('Error loading style:', error);\n            // Fallback to a basic style if loading fails\n            return this.getBasicStyle();\n        }\n    }\n\n    /**\n     * Update PMTiles URLs to be absolute paths for production deployment\n     */\n    updatePMTilesUrls(style) {\n        const baseUrl = window.location.origin + window.location.pathname.replace(/\\/[^\\/]*$/, '');\n        console.log('Base URL for PMTiles:', baseUrl);\n        \n        for (const [sourceId, source] of Object.entries(style.sources)) {\n            if (source.type === 'vector' && source.url && source.url.startsWith('pmtiles://tiles/')) {\n                const tilePath = source.url.replace('pmtiles://tiles/', '');\n                const oldUrl = source.url;\n                source.url = `pmtiles://${baseUrl}/tiles/${tilePath}`;\n                console.log(`Updated ${sourceId}: ${oldUrl} -> ${source.url}`);\n            }\n        }\n    }\n    \n    /**\n     * Create the MapLibre map instance\n     */\n    createMap(style) {\n        this.map = new maplibregl.Map({\n            container: this.containerId,\n            style: style,\n            bounds: this.options.bounds,\n            zoom: this.options.zoom,\n            minZoom: this.options.minZoom,\n            maxZoom: this.options.maxZoom\n        });\n        \n        this.map.showTileBoundaries = this.options.showTileBoundaries;\n    }\n    \n    /**\n     * Setup map event handlers\n     */\n    setupEventHandlers() {\n        // Map load event\n        this.map.on('load', () => {\n            // console.log('Map loaded successfully!');\n            // console.log('Available sources:', this.map.getStyle().sources);\n            \n            // Check if layers exist\n            const layers = this.map.getStyle().layers;\n            const contoursLayer = layers.find(layer => layer.id === 'contours');\n            const hillshadeLayer = layers.find(layer => layer.id === 'hills');\n            \n            // console.log('Contours layer found:', contoursLayer ? 'Yes' : 'No');\n            // console.log('Hillshade layer found:', hillshadeLayer ? 'Yes' : 'No');\n            \n            // debugging\n            this.printLayerOrder();\n            \n            // contour controls now that map is loaded\n            this.setupContourControls();\n        });\n        \n        // Source data events\n        // this.map.on('sourcedata', (e) => {\n        //     if (e.sourceId === 'roads-tiles' && e.isSourceLoaded) {\n        //         console.log('Roads tiles loaded successfully!');\n        //         // Check if roads are visible at current zoom/extent\n        //         setTimeout(() => {\n        //             const features = this.map.queryRenderedFeatures({layers: ['roads']});\n        //             console.log('Roads features visible:', features.length);\n        //             if (features.length > 0) {\n        //                 console.log('Sample road feature:', features[0]);\n        //             }\n        //         }, 1000);\n        //     }\n        // });\n        \n        // Click event for feature inspection\n        // this.map.on('click', (e) => {\n        //     const features = this.map.queryRenderedFeatures(e.point);\n        //     if (features.length > 0) {\n        //         const feature = features[0];\n        //         console.log('Clicked feature:', feature);\n                \n        //         // Create popup with feature info\n        //         new maplibregl.Popup()\n        //             .setLngLat(e.lngLat)\n        //             .setHTML(this.formatFeaturePopup(feature))\n        //             .addTo(this.map);\n        //     }\n        // });\n    }\n    \n    // controls\n    addControls() {\n        // Add navigation controls\n        this.map.addControl(new maplibregl.NavigationControl(), 'top-right');\n        \n        // Add scale control\n        this.map.addControl(new maplibregl.ScaleControl(), 'bottom-left');\n    }\n    \n    // contour controls (gui, later)\n    setupContourControls() {\n        if (!this.map) {\n            console.warn('Map not yet initialized for contour controls');\n            return;\n        }\n        \n        // Contour toggle\n        const contoursToggle = document.getElementById('contoursToggle');\n        if (contoursToggle) {\n            contoursToggle.addEventListener('change', (e) => {\n                this.toggleContours(e.target.checked);\n            });\n        }\n        \n        // Hillshade toggle\n        const hillshadeToggle = document.getElementById('hillshadeToggle');\n        if (hillshadeToggle) {\n            hillshadeToggle.addEventListener('change', (e) => {\n                this.toggleHillshade(e.target.checked);\n            });\n        }\n        \n        // Blend mode selector\n        const blendModeSelect = document.getElementById('blendModeSelect');\n        if (blendModeSelect) {\n            blendModeSelect.addEventListener('change', (e) => {\n                this.setContourBlendMode(e.target.value);\n            });\n            \n            // Set initial blend mode\n            this.setContourBlendMode('darken');\n        }\n    }\n    \n    // popups, later\n    formatFeaturePopup(feature) {\n        let content = `\n            <div style=\"max-width: 200px;\">\n                <strong>Layer:</strong> ${feature.sourceLayer || feature.source}<br>\n        `;\n        \n        // Special handling for contour features\n        if (feature.sourceLayer === 'contours') {\n            const elevation = feature.properties.ele;\n            const level = feature.properties.level;\n            content += `\n                <strong>Elevation:</strong> ${elevation}' (${Math.round(elevation * 0.3048)}m)<br>\n                <strong>Contour Type:</strong> ${level > 0 ? 'Major' : 'Minor'}<br>\n            `;\n        }\n        \n        content += `\n                <strong>Properties:</strong><br>\n                <pre style=\"font-size: 10px; white-space: pre-wrap;\">${JSON.stringify(feature.properties, null, 2)}</pre>\n            </div>\n        `;\n        \n        return content;\n    }\n    \n    // fallback\n    getBasicStyle() {\n        return {\n            version: 8,\n            sources: {},\n            layers: [\n                {\n                    id: 'background',\n                    type: 'background',\n                    paint: {\n                        'background-color': '#f0f0f0'\n                    }\n                }\n            ]\n        };\n    }\n    \n    // append third party contours to cartographic style\n    async addContourToStyle(style) {\n        // Lazy load contour functionality\n        const { demSource } = await initContours();\n        \n        // Add DEM source for hillshade\n        style.sources.dem = {\n            type: \"raster-dem\",\n            encoding: \"terrarium\",\n            tiles: [demSource.sharedDemProtocolUrl], // share cached DEM tiles with contour layer\n            maxzoom: 13,\n            tileSize: 256\n        };\n        \n        // Add contour source\n        style.sources.contours = {\n            type: \"vector\",\n            tiles: [\n                demSource.contourProtocolUrl({\n                    // meters to feet conversion for US data\n                    multiplier: 3.28084,\n                    thresholds: {\n                        // zoom: [minor, major] contour intervals in feet\n                        11: [200, 1000],\n                        12: [100, 500],\n                        13: [100, 500],\n                        14: [50, 200],\n                        15: [20, 100],\n                        16: [20, 100]\n                    },\n                    elevationKey: \"ele\",\n                    levelKey: \"level\",\n                    contourLayer: \"contours\"\n                })\n            ],\n            maxzoom: 16\n        };\n        \n        // Insert hillshade layer after background but before other layers\n        const hillshadeLayer = {\n            id: \"hills\",\n            type: \"hillshade\",\n            source: \"dem\",\n            paint: {\n                \"hillshade-exaggeration\": 0.25,\n                \"hillshade-shadow-color\": \"rgba(0,0,0,0.3)\",\n                \"hillshade-highlight-color\": \"rgba(255,255,255,0.3)\"\n            }\n        };\n        \n        // mix-blend-mode approximation\n        const contourLinesLayer = {\n            id: \"contours\",\n            type: \"line\",\n            source: \"contours\",\n            \"source-layer\": \"contours\",\n            paint: {\n                // Use dark colors with transparency to create darkening effect\n                \"line-color\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, \"rgba(0, 0, 0, 0.4)\",      // Very dark at low zoom\n                    13, \"rgba(50, 25, 0, 0.5)\",    // Dark brown at medium zoom\n                    15, \"rgba(80, 40, 20, 0.6)\"    // Medium brown at high zoom\n                ],\n                \"line-width\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, [\n                        \"case\",\n                        [\"==\", [\"get\", \"level\"], 1], 0.9,  // Major contours\n                        0.45                                 // Minor contours\n                    ],\n                    13, [\n                        \"case\", \n                        [\"==\", [\"get\", \"level\"], 1], 1.1,  // Major contours\n                        0.5                                // Minor contours\n                    ],\n                    15, [\n                        \"case\",\n                        [\"==\", [\"get\", \"level\"], 1], 1.4,  // Major contours\n                        0.7                                // Minor contours\n                    ]\n                ],\n                \"line-opacity\": [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, 0.6,\n                    13, 0.7,\n                    15, 0.8\n                ]\n            },\n            layout: {\n                \"line-join\": \"round\",\n                \"line-cap\": \"round\"\n            }\n        };\n        \n        // contour labels, hidden rn\n        const contourLabelsLayer = {\n            id: \"contour-text\",\n            type: \"symbol\",\n            source: \"contours\",\n            \"source-layer\": \"contours\",\n            filter: [\">\", [\"get\", \"level\"], 0],\n            paint: {\n                \"text-halo-color\": \"white\",\n                \"text-halo-width\": 2,\n                \"text-color\": \"rgba(139, 69, 19, 0.8)\"\n            },\n            layout: {\n                \"visibility\": \"none\",\n                \"symbol-placement\": \"line\",\n                \"text-anchor\": \"center\",\n                \"text-size\": 10,\n                \"text-field\": [\n                    \"concat\",\n                    [\"number-format\", [\"get\", \"ele\"], {}],\n                    \"'\"\n                ],\n                \"text-font\": [\"Noto Sans Bold\"],\n                \"text-rotation-alignment\": \"map\"\n            }\n        };\n        \n        // Add the contour and hillshade layers to the style\n        // The sorting will be handled by sortLayersByDrawOrder() method\n        style.layers.push(hillshadeLayer);\n        style.layers.push(contourLinesLayer);\n        style.layers.push(contourLabelsLayer);\n    }\n\n    /**\n     * Sort layers according to the draw order index\n     * @param {Object} style - The MapLibre style object\n     * @returns {Object} - Style with sorted layers\n     */\n    sortLayersByDrawOrder(style) {\n        if (!style.layers) return style;\n        \n        // Sort layers based on draw order index\n        style.layers.sort((a, b) => {\n            const orderA = this.layerDrawOrder[a.id] !== undefined ? this.layerDrawOrder[a.id] : 999;\n            const orderB = this.layerDrawOrder[b.id] !== undefined ? this.layerDrawOrder[b.id] : 999;\n            return orderA - orderB;\n        });\n        \n        console.log('Layer draw order applied:', style.layers.map(layer => ({\n            id: layer.id,\n            order: this.layerDrawOrder[layer.id] || 'unspecified'\n        })));\n        \n        return style;\n    }\n    \n    /**\n     * Add a new layer with specified draw order\n     * @param {string} layerId - The layer ID\n     * @param {number} drawOrder - The draw order index (0 = bottom, higher = top)\n     * @param {Object} layerDefinition - The layer definition object\n     */\n    addLayerWithOrder(layerId, drawOrder, layerDefinition) {\n        if (!this.map) return;\n        \n        // Update the draw order index\n        this.layerDrawOrder[layerId] = drawOrder;\n        \n        // Find the correct position to insert the layer\n        const sortedLayers = Object.entries(this.layerDrawOrder)\n            .filter(([id, order]) => this.map.getLayer(id) && order <= drawOrder)\n            .sort((a, b) => b[1] - a[1]); // Sort descending to find the layer just below\n        \n        const beforeLayerId = sortedLayers.length > 0 ? sortedLayers[0][0] : undefined;\n        \n        // Add the layer\n        this.map.addLayer(layerDefinition, beforeLayerId);\n        \n        console.log(`Added layer '${layerId}' with draw order ${drawOrder}`);\n    }\n    \n    /**\n     * Update layer draw order\n     * @param {string} layerId - The layer ID\n     * @param {number} newDrawOrder - The new draw order index\n     */\n    updateLayerOrder(layerId, newDrawOrder) {\n        if (!this.map || !this.map.getLayer(layerId)) return;\n        \n        // Update the draw order index\n        this.layerDrawOrder[layerId] = newDrawOrder;\n        \n        // Remove and re-add the layer to change its position\n        const layerDefinition = this.map.getLayer(layerId);\n        this.map.removeLayer(layerId);\n        this.addLayerWithOrder(layerId, newDrawOrder, layerDefinition);\n    }\n    \n    /**\n     * Get the map instance\n     */\n    getMap() {\n        return this.map;\n    }\n    \n    /**\n     * Toggle layer visibility\n     */\n    toggleLayer(layerId, visible = null) {\n        if (!this.map) return;\n        \n        const visibility = visible !== null ? \n            (visible ? 'visible' : 'none') : \n            (this.map.getLayoutProperty(layerId, 'visibility') === 'none' ? 'visible' : 'none');\n        \n        this.map.setLayoutProperty(layerId, 'visibility', visibility);\n    }\n    \n    /**\n     * Toggle contour layers visibility\n     */\n    toggleContours(visible = null) {\n        this.toggleLayer('contours', visible);\n        this.toggleLayer('contour-text', visible);\n    }\n    \n    /**\n     * Toggle hillshade visibility\n     */\n    toggleHillshade(visible = null) {\n        this.toggleLayer('hills', visible);\n    }\n    \n    /**\n     * Set contour interval based on zoom level\n     */\n    setContourInterval(minorInterval, majorInterval) {\n        if (!this.map) return;\n        \n        // Update the contour source with new thresholds\n        const currentZoom = Math.floor(this.map.getZoom());\n        const newThresholds = {};\n        newThresholds[currentZoom] = [minorInterval, majorInterval];\n        \n        // Note: Changing contour intervals requires reloading the source\n        console.log(`Contour intervals set to: minor=${minorInterval}ft, major=${majorInterval}ft`);\n    }\n\n    /**\n     * Set contour blend mode (simulated through color adjustments)\n     * @param {string} mode - 'darken', 'multiply', 'overlay', 'normal'\n     */\n    setContourBlendMode(mode = 'normal') {\n        if (!this.map || !this.map.getLayer('contours')) return;\n        \n        let colorExpression, opacityValue;\n        \n        switch (mode) {\n            case 'darken':\n                colorExpression = [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, \"rgba(0, 0, 0, 0.4)\",\n                    13, \"rgba(50, 25, 0, 0.5)\",\n                    15, \"rgba(80, 40, 20, 0.6)\"\n                ];\n                opacityValue = [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, 0.6,\n                    13, 0.7,\n                    15, 0.8\n                ];\n                break;\n                \n            case 'multiply':\n                colorExpression = [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, \"rgba(40, 20, 10, 0.3)\",\n                    13, \"rgba(60, 30, 15, 0.4)\",\n                    15, \"rgba(80, 40, 20, 0.5)\"\n                ];\n                opacityValue = 0.9;\n                break;\n                \n            case 'overlay':\n                colorExpression = [\n                    \"interpolate\",\n                    [\"linear\"],\n                    [\"zoom\"],\n                    11, \"rgba(139, 69, 19, 0.3)\",\n                    13, \"rgba(160, 80, 40, 0.4)\",\n                    15, \"rgba(180, 90, 45, 0.5)\"\n                ];\n                opacityValue = 0.7;\n                break;\n                \n            case 'normal':\n            default:\n                colorExpression = \"rgba(139, 69, 19, 0.6)\";\n                opacityValue = 1;\n                break;\n        }\n        \n        this.map.setPaintProperty('contours', 'line-color', colorExpression);\n        this.map.setPaintProperty('contours', 'line-opacity', opacityValue);\n        \n        console.log(`Contour blend mode set to: ${mode}`);\n    }\n\n    /**\n     * Cleanup resources\n     */\n    destroy() {\n        if (!this.map) {\n            this.map.remove();\n        }\n        if (this.protocol) {\n            maplibregl.removeProtocol(\"pmtiles\");\n        }\n    }\n    \n    /**\n     * Get the current layer draw order configuration\n     * @returns {Object} - The layer draw order index\n     */\n    getLayerDrawOrder() {\n        return { ...this.layerDrawOrder };\n    }\n    \n    /**\n     * Get layers sorted by draw order\n     * @returns {Array} - Array of layer IDs in draw order\n     */\n    getLayersByDrawOrder() {\n        if (!this.map) return [];\n        \n        const layers = this.map.getStyle().layers;\n        return layers\n            .map(layer => ({\n                id: layer.id,\n                order: this.layerDrawOrder[layer.id] || 999\n            }))\n            .sort((a, b) => a.order - b.order)\n            .map(item => item.id);\n    }\n    \n    /**\n     * Print current layer order to console (for debugging)\n     */\n    printLayerOrder() {\n        if (!this.map) {\n            console.log('Map not initialized');\n            return;\n        }\n        \n        const layers = this.map.getStyle().layers;\n        console.log('Current layer stack (bottom to top):');\n        console.table(layers.map((layer, index) => ({\n            Position: index,\n            'Layer ID': layer.id,\n            'Draw Order': this.layerDrawOrder[layer.id] || 'unspecified',\n            Type: layer.type\n        })));\n    }\n}\n\n/**\n * Auto-cleanup on page unload\n */\nwindow.addEventListener('beforeunload', () => {\n    maplibregl.removeProtocol(\"pmtiles\");\n});\n\n// Export the class as default\nexport default OvertureMap;\n"],"file":"assets/app-Bi8-Z0Tj.js"}